<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <title>Todo</title>
</head>

<body>

    <!-- Button trigger modal -->
    <button type="button" id="launch-btn" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
        Create post
    </button>
    <a href="/users/register"><button type="button" id="logout-btn" class="btn btn-danger">
        Log Out
    </button></a>
    <div class="new">New!</div>


    <!-- Modal -->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog"
        aria-labelledby="exampleModalCenterTitle" aria-hidden="true" id="modal-fade">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Create Blog</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form id="form-submit">
                    <input type="text" id="title" placeholder="Title"><br><br>
                    <textarea rows="4" cols="50" id="text-body" placeholder="It's a fine day!"></textarea>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Post</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Read more window -->
    <!-- Button trigger modal -->

    <!-- Modal -->
    <div class="modal fade" id="exampleModal-Center" tabindex="-1" role="dialog"
        aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalCenterTitle">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    ...
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="close-btn" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="add-comment-btn">Add comment</button> <br>

                    <div id="comment-area">
                        <form id="comment-form" method="POST" action="/comment">
                            <input name="myComment" type="text" id="comment-box">
                            <button type="submit" class="btn btn-primary" id="post-comment-btn">Post</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="allPost" id="display"> </div>

    <style>
        .read-more {
            background-color: red;
            color: white;
            font-size: 12px;
            margin-left: 2px;
            text-decoration: none;
            /* display: none; */
        }

        #comment-area {
            display: none;
        }

        @import url("https://fonts.googleapis.com/css?family=Thasadith:700&display=swap");

        body {
        font-family: "Thasadith", sans-serif;
        }

        .searchBox{
            display: flex;
            width: 60%;
            margin: auto;
            padding: 20px 0;    
        }
        .searchBox .searchbar{
            width: 80%;
        }
        .searchBox .searchbar input{
            width: 99%;
            padding: 10px 0 10px 10px;
        }

        .searchBtn {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .allPost {
        width: 50%;
        margin: 0 auto;
        /* border: 2px solid rgb(230, 229, 229);
        padding: 10px;
        border-radius: 10px;
        box-shadow: 5px 5px 20px gray;
        font-size: 20px;
        letter-spacing: 2px; */
 
        }

        .eachPost {
        padding: 10px;
        border-bottom: 1px solid black;
        padding-bottom: 30px;
        }

        .eachPost:last-child {
            padding: 10px;
            border-bottom: 0px solid black;
            padding-bottom: 30px;
        }

        .firstRow {
        display: flex;
        justify-content: space-between;
        }

        .firstRow .leftSide{
            display: flex;
        }

        .footer{
            display: flex;
        }

        .footer p{
            font-size: 15px;
            color: gray;
        }

        .footer .date{
            margin-left: 10px;
        }

        .firstRow .title {
        font-size: 35px;
        margin-left: 10px;
        }

        .firstRow .title p {
        }

        .firstRow .image img{
            border-radius: 50%;
        }

        .firstRow .twoButton {
        display: flex;
        align-content: center;
        }

        .firstRow .twoButton .update button ,
        .firstRow .twoButton .delete button ,
        .searchBtn button{
        padding: 10px 40px;
        margin-right: 10px;
        border-radius: 10px;
        outline: none;
        border: none;
        background: rgb(23, 165, 190);
        color: white;
        font-size: 18px;
        border: 1px solid transparent;
        transition: background 0.4s, color 0.4s, border 0.4s;
        }

        .searchBtn button{
            background: rgba(31, 28, 28, 1);
            border-radius: 0px;
            padding: 8.5px 40px;
        }

        .firstRow .twoButton .update {
        display: flex;
        flex-direction: column;
        justify-content: center;
        }

        .firstRow .twoButton .delete {
        display: flex;
        flex-direction: column;
        justify-content: center;
        }

        .firstRow .twoButton .update button:hover ,
        .firstRow .twoButton .delete button:hover {
        background: white;
        color: rgb(23, 165, 190);
        border: 1px solid rgb(23, 165, 190);
        }

        a {
        color: black;
        text-decoration: none;
        outline: none;

        background: rgb(52, 200, 84);
        padding: 6px 15px;
        font-size: 15px;
        color: white;
        border-radius: 5px;
        }

        @keyframes fromLeftToRight {
        0% {
            opacity: 0;
            transform: translateX(-100px) rotate(105deg);
        }

        100% {
            opacity: 1;
            transform: none;
        }
        }

        @keyframes fromRightToLeft {
        0% {
            opacity: 0;
            transform: translateX(100px) rotate(135deg);
        }

        100% {
            opacity: 1;
            transform: none;
        }
        }
    </style>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
    <script>

        $(document).ready(() => {
            const display = $('#display');
            const form = $('#form-submit');
            const commentForm = $('#comment-form');
            const title = $('#title');
            const post_body = $('#text-body');
            const commentBody = $('#comment-box');
            let btn_post = new Map();

            $('#logout-btn').click(() => {
                console.log("log out Clicked");
                window.location.pathname = '/register';
            });

            $(document).on("click", "a.readMore", function () {
                console.log("clicked");
                var id = $(this).attr("id");
                let todo = btn_post.get(id);
                let title = todo.title;
                let postBody = todo.postBody;
                document.getElementById('exampleModal-Center').style.display = "block";
                $('h5').html(title);
                $('.modal-body').html(postBody);
            });

            $('#add-comment-btn').click(() => {
                console.log("add comment Clicked");
                document.getElementById('comment-area').style.display = "block";
                document.getElementById('close-btn').style.display = 'none';
                document.getElementById('add-comment-btn').style.display = 'none';
            })

            const getDate = () => {
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "June",
                "July", "Aug", "Sep", "Oct", "Nov", "Dec"
                ];
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth()); //January is 0!
                var yyyy = today.getFullYear();
                let thisDate = monthNames[mm] + " " + dd + ", " + yyyy 
                return thisDate;
                // console.log("Date: "+thisDate);
            }
            // getDate();

            const getTodos = () => {
                fetch('/getTodos', { method: 'get' }).then((response) => {
                    return response.json();
                }).then((data) => {
                    console.log(data);
                    displayTodos(data);
                })
            }

            getTodos();

            const resetTodsInput = () => {
                title.val('');
                post_body.val('');
            }

            const editTodo = (todo, todoID, editID) => {
                let editBtn = $(`#${editID}`);
                editBtn.click(() => {
                    console.log("Console: edit");
                    fetch(`${todo._id}`, {
                        method: 'put',
                        headers: {
                            'Content-Type': 'application/json; charset=utf-8'
                        },
                        body: JSON.stringify({ todo: userip.val() })
                    }).then((response) => {
                        return response.json();
                    }).then((data) => {
                        if (data.ok == 1) {
                            let to
                        }
                    })
                })
            }

            const deleteTodo = (todo, listItemID, deleteID) => {
                let deleteBtn = $(`#${deleteID}`);
                deleteBtn.click(() => {
                    console.log("Console: delete");
                    fetch(`/${todo._id}`, {
                        method: 'delete'
                    }).then((response) => {
                        return response.json();
                    }).then((data) => {
                        if (data.ok == 1) {
                            $(`#${listItemID}`).remove();
                        }
                    });
                });
            }

            const build_id = (todo) => {
                return {
                    editID: "edit_" + todo._id,
                    deleteID: "delete_" + todo._id,
                    listItemID: "listItem_" + todo._id,
                    todoID: "todo_" + todo._id
                }
            }

            const buildTemplate = (todo, ids) => {
                let content = todo.postBody;
                let displayedContent = content;
                if (content.length > 120) {
                    displayedContent = content.substring(0, 4) + "...";
                }
                btn_post.set(`read-more-${ids.todoID}`, todo);
                return `
                <div class="eachPost" id="${ids.todoID}">
                    <div class="firstRow">
                         <div class="leftSide">
                            <div class="image">
                                <img src="https://www.google.com/url?sa=i&source=images&cd=&ved=2ahUKEwiumNXSuqDkAhVd73MBHecvDCAQjRx6BAgBEAQ&url=https%3A%2F%2Fsonicpokemon.fandom.com%2Fwiki%2FPsyduck&psig=AOvVaw0wGL8Q-6qsSBDbrp6b0pF6&ust=1566906210507797">
                            </div>
                            <div class="title">
                                <p> ${todo.title} </p>
                            </div>
                        </div>
                    <div class="twoButton">
                 <div class="update"> <button>UPDATE</button> </div>
             <div class="delete" id="${ids.deleteID}"> <button>DELETE</button> </div>
            </div>
        </div>

        <div class="footer">
             <div class="author"><p>Safwan</p></div> 
             <div class="date"><p>${todo.date}</p></div>
        </div>

        <div class="secondRow">
            <p> ${todo.postBody} </p>
        </div>

        <div class="thirdRow">
            <a href="#"> Read More </a>
        </div>
        </div>`
            }

            const displayTodos = (data) => {
                data.forEach((todo) => {
                    let ids = build_id(todo);
                    display.append(buildTemplate(todo, ids));
                    // editTodo(todo, ids.todoID, ids.editID);
                    deleteTodo(todo, ids.todoID, ids.deleteID);
                });
            }

            form.submit((e) => {
                e.preventDefault();
                var post = { title: title.val(), postBody: post_body.val(), date: getDate() };
                console.log("Console: " + post);
                fetch('/', {
                    method: 'post',
                    body: JSON.stringify(post),
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8'
                    }
                }).then((response) => {
                    return response.json();
                }).then((data) => {
                    if (data.result.ok == 1 && data.result.n == 1) {
                        let ids = build_id(data.document);
                        display.append(buildTemplate(data.document, ids));
                        // editTodo(data.document, ids.todoID, ids.editID);
                        deleteTodo(data.document, ids.todoID, ids.deleteID);
                    }
                    $('#modal-fade').modal('toggle');
                    console.log("Post created");
                })
            })

            //Comment submission
            commentForm.submit((e) => {
                e.preventDefault();
                console.log("Hello", e);
                var comment = { commentBody: commentBody.val() };
                console.log("Console: " + comment.commentBody);
                fetch('/comment', {
                    method: 'POST',
                    body: JSON.stringify(comment),
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8'
                    }
                }).then((response) => {
                    return response.json();
                }).then((data) => {
                    console.log('comment posted');
                    $('#modal-fade').modal('toggle');
                    console.log("Post created");
                })
            })

        });

    </script>
</body>

</html>